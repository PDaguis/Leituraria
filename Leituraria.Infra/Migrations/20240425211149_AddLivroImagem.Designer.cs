// <auto-generated />
using System;
using Leituraria.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Leituraria.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240425211149_AddLivroImagem")]
    partial class AddLivroImagem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AluguelLivro", b =>
                {
                    b.Property<int>("AlugueisId")
                        .HasColumnType("INT");

                    b.Property<int>("LivrosId")
                        .HasColumnType("INT");

                    b.HasKey("AlugueisId", "LivrosId");

                    b.HasIndex("LivrosId");

                    b.ToTable("AluguelLivro");
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Aluguel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlugadoEm")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("DevolverEm")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Aluguel", (string)null);
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("Imagem")
                        .HasColumnType("VARCHAR(600)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INT");

                    b.Property<string>("Complemento")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataPublicacao")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(600)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Imagem")
                        .HasColumnType("VARCHAR(600)");

                    b.Property<string>("Isbn10")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Isbn13")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("QuantidadePaginas")
                        .HasColumnType("INT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(300)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("AluguelLivro", b =>
                {
                    b.HasOne("Leituraria.Core.Entities.Aluguel", null)
                        .WithMany()
                        .HasForeignKey("AlugueisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leituraria.Core.Entities.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Aluguel", b =>
                {
                    b.HasOne("Leituraria.Core.Entities.Cliente", "Cliente")
                        .WithMany("Alugueis")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Endereco", b =>
                {
                    b.HasOne("Leituraria.Core.Entities.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Livro", b =>
                {
                    b.HasOne("Leituraria.Core.Entities.Autor", "Autor")
                        .WithMany("Livros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Autor", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Leituraria.Core.Entities.Cliente", b =>
                {
                    b.Navigation("Alugueis");

                    b.Navigation("Enderecos");
                });
#pragma warning restore 612, 618
        }
    }
}
